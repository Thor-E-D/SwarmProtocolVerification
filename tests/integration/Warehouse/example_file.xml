<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta><declaration>
const int NUMBER_OF_Door = 1;
typedef int[0,NUMBER_OF_Door-1] Door_t;
const int NUMBER_OF_Forklift = 2;
typedef int[0,NUMBER_OF_Forklift-1] Forklift_t;
const int NUMBER_OF_Transport = 1;
typedef int[0,NUMBER_OF_Transport-1] Transport_t;
int amountOfLogs = NUMBER_OF_Door + NUMBER_OF_Forklift + NUMBER_OF_Transport;
int currentLogToPropagate;
int amountOfPropagation = 0;
const int Request_ID = 0;
const int Close_ID = 1;
const int Deliver_ID = 2;
const int Get_ID = 3;
const int amountOfUniqueEvents = 4;
const int outerSizeBranchingList = 1;
const int innerSizeBranchingList = 2;
const int branchingList[outerSizeBranchingList][innerSizeBranchingList] ={{0, 1}};
const int isBranchingList[amountOfUniqueEvents] = {true, true, false, false};
const int isInBranchingPartion[amountOfUniqueEvents] = {0, 0, -1, -1};
typedef struct {
    int eventID;
    int emitterID;
    int orderCount;
    int basedOnOrderCount;
    int tiedTo;
    bool ignored;
} logEntryType;
int maxUpdatesSincePropagation = 1;
const int maxAmountOfTied = 1;
const int eventsTiedTo[amountOfUniqueEvents][maxAmountOfTied] = {{Request_ID}, {Request_ID}, {Request_ID}, {Request_ID}};
const int logSize = 20;
int eventOrderCounter = 1;
logEntryType tempLogEntry;
logEntryType propagationLog[logSize];
logEntryType globalLog[logSize];
int loop_counter2 = 0;
urgent broadcast chan propagate_log;
urgent chan do_log_update_Door[Door_t];
urgent chan reset_Door[Door_t];
urgent broadcast chan advance_Door_Request[Door_t];
urgent broadcast chan advance_Door_Close[Door_t];
urgent broadcast chan advance_Door_Deliver[Door_t];
urgent chan do_log_update_Forklift[Forklift_t];
urgent chan reset_Forklift[Forklift_t];
urgent broadcast chan advance_Forklift_Request[Forklift_t];
urgent broadcast chan advance_Forklift_Close[Forklift_t];
urgent broadcast chan advance_Forklift_Get[Forklift_t];
urgent chan do_log_update_Transport[Transport_t];
urgent chan reset_Transport[Transport_t];
urgent broadcast chan advance_Transport_Request[Transport_t];
urgent broadcast chan advance_Transport_Close[Transport_t];
urgent broadcast chan advance_Transport_Get[Transport_t];
urgent broadcast chan advance_Transport_Deliver[Transport_t];

bool isInSubsciptions(int tmpList[amountOfUniqueEvents], int possibleEntry) {
    int i = 0;
    for (i = 0; i &lt; amountOfUniqueEvents; i++) {
        if (tmpList[i] == possibleEntry) {
            return true;
        } else if (tmpList[i] == -1) {
            return false;
        }
    }
    return false;
}

bool isIntInList(int tmpList[logSize], int possibleEntry) {
    int i = 0;
    for (i = 0; i &lt; logSize; i++) {
        if (tmpList[i] == possibleEntry) {
            return true;
        } else if (tmpList[i] == 0) {
            return false;
        }
    }
    return false;
}


void addIntToList(int &amp;tmpList[logSize], int newEntry) {
    int i = 0;
    for (i = 0; i &lt; logSize; i++) {
        if (tmpList[i] == 0) {
            tmpList[i] = newEntry;
            return;
        }
    }
}


int getEventIDfromOrderCount(int orderCount) {
    int i = 0;
    for (i = 0; i &lt; logSize; i++) {
        if (globalLog[i].orderCount == orderCount) {
            return globalLog[i].eventID;
        }
    }
    return -1;
}

void setNextLogToPropagate() {
    if (amountOfPropagation &lt; amountOfLogs-2) {
        currentLogToPropagate = (currentLogToPropagate+1) % amountOfLogs;
        amountOfPropagation++;
    } else {
        // reset
        amountOfPropagation = -1;
    }
}


int getOrderCount() {
    int temp = eventOrderCounter;
    eventOrderCounter = eventOrderCounter + 1;
    return temp;
}


void setLogEntryForUpdate(int eventID, int emitterID, int basedOnOrderCount, bool ignored) {
    tempLogEntry.eventID = eventID;
    tempLogEntry.emitterID = emitterID;
    tempLogEntry.orderCount = getOrderCount();
    tempLogEntry.basedOnOrderCount = basedOnOrderCount;
    tempLogEntry.tiedTo = -1;
    tempLogEntry.ignored = ignored;
}


void findAndSetTiedTo(logEntryType &amp;tempLog[logSize]) {
    int k;
    int j;
    int i;
    for(i = logSize-1; i &gt;= 0; i--) {
        if (tempLog[i].orderCount != 0) {
            for (j = 0; j&lt;maxAmountOfTied; j++) {
                if (tempLog[i].eventID == eventsTiedTo[tempLogEntry.eventID][j] &amp;&amp; tempLog[i].tiedTo != -1) {
                    tempLogEntry.tiedTo = tempLog[i].orderCount;
                    return;
                }
            }
        }
    }
    for(i = logSize-1; i &gt;= 0; i--) {
        if (tempLog[i].orderCount != 0) {
            if (tempLog[i].emitterID == tempLogEntry.emitterID) {
                for (j = 0; j&lt;maxAmountOfTied; j++) {
                    for (k = 0; k&lt;maxAmountOfTied; k++) {
                        if (eventsTiedTo[tempLogEntry.eventID][j] == eventsTiedTo[tempLog[i].eventID][k] &amp;&amp; tempLog[i].tiedTo != -1) {
                            tempLogEntry.tiedTo = tempLog[i].tiedTo;
                            return;
                        }
                    }
                }
            }
        }
    }
    for(i = logSize-1; i &gt;= 0; i--) {
        if (tempLog[i].orderCount != 0) {
            for (j = 0; j&lt;maxAmountOfTied; j++) {
                if (tempLog[i].eventID == eventsTiedTo[tempLogEntry.eventID][j]) {
                    tempLogEntry.tiedTo = tempLog[i].orderCount;
                    return;
                }
            }
        }
    }  
}

void setPropagationLog(logEntryType tempLog[logSize]) {
    propagationLog = tempLog;
}


void updateGlobalLog() {
    int i;
    logEntryType resLog[logSize];
    int count = 0;
    bool addedEntry = false;

    for (i = 0; i &lt; (logSize); i++) {
        if (globalLog[count].orderCount == 0) {
            if (addedEntry) {
                resLog[i] = globalLog[count];
                globalLog = resLog;
                return;
            }
            resLog[i] = tempLogEntry;
            globalLog = resLog;
            return;
        }
        else if (globalLog[count].orderCount &gt; tempLogEntry.orderCount) {
            resLog[i] = tempLogEntry;
            count = count - 1;
            addedEntry = true;
        } else {
            resLog[i] = globalLog[count];
        }
        count = count + 1;
    }
    globalLog = resLog;
}

void updateLog(logEntryType &amp;tempLog[logSize]) {
    int i = 0;
    findAndSetTiedTo(tempLog);
    updateGlobalLog();
    for (i = 0; i &lt; logSize; i++) {
        if (tempLog[i].orderCount == 0) { // Log entry is unused since orderCount can never be 0
            tempLog[i] = tempLogEntry; // Update log
            return;
        }
    }
    return;
    // If we reach here log is full and we are in trouble
}


bool isInBranchingConflict(int partition, int eventID) {
    int i = 0;
    for (i = 0; i &lt; innerSizeBranchingList; i++) {
        if (branchingList[partition][i] == eventID) {
            return true;
        }
    }
    return false;
}

bool handleBranchingEvent(logEntryType &amp;tmpLogEntry,logEntryType &amp;resLog[logSize], int &amp;discardedEvents[logSize], int &amp;discardedDueToCompetionEvents[logSize], int currentIndex) {
    int j;
    if (isIntInList(discardedDueToCompetionEvents, tmpLogEntry.basedOnOrderCount)) {
        tmpLogEntry.ignored = true;
    } 
    //Need to check if looping cause the we would accept it if is basedOn is in discardedEvents
    if (isIntInList(discardedEvents, tmpLogEntry.tiedTo)) {
        int tiedToEventID = getEventIDfromOrderCount(tmpLogEntry.tiedTo);
        if (isInBranchingPartion[tmpLogEntry.eventID] != isInBranchingPartion[tiedToEventID]) {
            tmpLogEntry.ignored = true;
        }
    }
    
    for (j = currentIndex; j &gt;= 0; j--) {
        if (resLog[j].tiedTo == tmpLogEntry.tiedTo &amp;&amp; tmpLogEntry.basedOnOrderCount == resLog[j].basedOnOrderCount) {
            if(isInBranchingConflict(isInBranchingPartion[tmpLogEntry.eventID], resLog[j].eventID)) {
                if (!isIntInList(discardedEvents, resLog[j].orderCount)) {
                    tmpLogEntry.ignored = true; //competetion
                    return true;
                }
            }
        }
    }
    return false;
}

bool handleStandardEvent(logEntryType &amp;tmpLogEntry,logEntryType &amp;resLog[logSize], int &amp;discardedEvents[logSize], int &amp;discardedDueToCompetionEvents[logSize], int currentIndex) {
    int i;
    if (isBranchingList[tmpLogEntry.eventID]) {
        return handleBranchingEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    }
    if (isIntInList(discardedDueToCompetionEvents, tmpLogEntry.basedOnOrderCount) || isIntInList(discardedEvents, tmpLogEntry.basedOnOrderCount)) {
        tmpLogEntry.ignored = true;
        return false;
    }
    for (i = currentIndex; i &gt;= 0; i--) {
        if (resLog[i].eventID == tmpLogEntry.eventID &amp;&amp; resLog[i].tiedTo == tmpLogEntry.tiedTo) {
            tmpLogEntry.ignored = true; //competetion
            return true;
        }
    }
    return false;
}

bool handleOwnEvent(logEntryType &amp;tmpLogEntry,logEntryType &amp;resLog[logSize], int &amp;discardedEvents[logSize], int &amp;discardedDueToCompetionEvents[logSize], int currentIndex, int id, bool &amp;olderEntryIgnored) {
    int j;
    bool inCompetetion = false;
    if (tmpLogEntry.emitterID == id &amp;&amp; isIntInList(discardedEvents, tmpLogEntry.basedOnOrderCount)) {
        tmpLogEntry.ignored = true; //competetion
        return true;
    }
    inCompetetion = handleStandardEvent(tmpLogEntry,resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    if (tmpLogEntry.emitterID != id) {
        tmpLogEntry.ignored = true;
        // Check if we have already tied into this so an event we emitted that is tied to the same thing
        for (j = currentIndex; j &gt;= 0; j--) {
            if (resLog[j].emitterID == id &amp;&amp; resLog[j].eventID == tmpLogEntry.eventID &amp;&amp; resLog[j].tiedTo == tmpLogEntry.tiedTo) {
                olderEntryIgnored = false;
                return inCompetetion;
                }
        }
        for (j = currentIndex; j &gt;= 0; j--) {
            if (resLog[j].tiedTo == tmpLogEntry.tiedTo || tmpLogEntry.tiedTo == resLog[j].orderCount) {
                resLog[j].ignored = true;
            }
        }
        olderEntryIgnored = true;
    }
    return inCompetetion;
}


void updateLogDoor(logEntryType &amp;tempLog[logSize], int &amp;emittedOrderCounts[logSize], int log_id_start) {    
    addIntToList(emittedOrderCounts, tempLogEntry.orderCount);
    // We check if basedemitterID set to -2 as this is a flag for unknown
    tempLogEntry.emitterID = tempLogEntry.emitterID + log_id_start;
    if (tempLogEntry.basedOnOrderCount == -2) {
        int i = 0;
        for (i = logSize-1; i &gt;= 0; i--) {
            if (tempLog[i].orderCount == 0) {
            } else { 
                if (tempLogEntry.eventID == Close_ID) {
                    if (tempLog[i].eventID == Deliver_ID) {
                        tempLogEntry.basedOnOrderCount = tempLog[i].orderCount;
                        updateLog(tempLog);
                        return;
                    }
                }
            }
        }
    }
    tempLogEntry.basedOnOrderCount = -1;
    updateLog(tempLog);
    return;
}

void updateLogForklift(logEntryType &amp;tempLog[logSize], int &amp;emittedOrderCounts[logSize], int log_id_start) {    
    addIntToList(emittedOrderCounts, tempLogEntry.orderCount);
    // We check if basedemitterID set to -2 as this is a flag for unknown
    tempLogEntry.emitterID = tempLogEntry.emitterID + log_id_start;
    if (tempLogEntry.basedOnOrderCount == -2) {
        int i = 0;
        for (i = logSize-1; i &gt;= 0; i--) {
            if (tempLog[i].orderCount == 0) {
            } else { 
                if (tempLogEntry.eventID == Get_ID) {
                    if (tempLog[i].eventID == Request_ID) {
                        tempLogEntry.basedOnOrderCount = tempLog[i].orderCount;
                        updateLog(tempLog);
                        return;
                    }
                }
            }
        }
    }
    tempLogEntry.basedOnOrderCount = -1;
    updateLog(tempLog);
    return;
}

void updateLogTransport(logEntryType &amp;tempLog[logSize], int &amp;emittedOrderCounts[logSize], int log_id_start) {    
    addIntToList(emittedOrderCounts, tempLogEntry.orderCount);
    // We check if basedemitterID set to -2 as this is a flag for unknown
    tempLogEntry.emitterID = tempLogEntry.emitterID + log_id_start;
    if (tempLogEntry.basedOnOrderCount == -2) {
        int i = 0;
        for (i = logSize-1; i &gt;= 0; i--) {
            if (tempLog[i].orderCount == 0) {
            } else { 
                if (tempLogEntry.eventID == Request_ID) {
                    if (tempLog[i].eventID == Deliver_ID) {
                        tempLogEntry.basedOnOrderCount = tempLog[i].orderCount;
                        updateLog(tempLog);
                        return;
                    }
                } else if (tempLogEntry.eventID == Deliver_ID) {
                    if (tempLog[i].eventID == Get_ID) {
                        tempLogEntry.basedOnOrderCount = tempLog[i].orderCount;
                        updateLog(tempLog);
                        return;
                    }
                }
            }
        }
    }
    tempLogEntry.basedOnOrderCount = -1;
    updateLog(tempLog);
    return;
}
</declaration><template>
	<name>Door</name>
	<parameter>Door_t id</parameter>
<declaration>
</declaration>
<location id="id175" x="241" y="639"><name x="243" y="641">l3</name><urgent /></location>
<location id="id176" x="241" y="147"><name x="243" y="149">l1</name><urgent /></location>
<location id="id177" x="241" y="393"><name x="243" y="395">l0</name><urgent /></location>
	<init ref="id177"/>
<transition id="id178"><source ref="id175" /><target ref="id177" /><label kind="synchronisation" x="241" y="501">reset_Door[id]?</label><nail x="241" y="516" /></transition>
<transition id="id179"><source ref="id176" /><target ref="id177" /><label kind="synchronisation" x="170" y="10">reset_Door[id]?</label><nail x="170" y="25" /></transition>
<transition id="id180"><source ref="id177" /><target ref="id177" /><label kind="synchronisation" x="241" y="378">reset_Door[id]?</label></transition>
<transition id="id181"><source ref="id177" /><target ref="id175" /><label kind="synchronisation" x="37" y="255">advance_Door_Close[id]?</label><nail x="37" y="270" /></transition>
<transition id="id182"><source ref="id177" /><target ref="id175" /><label kind="synchronisation" x="445" y="255">do_log_update_Door[id]!</label><label kind="assignment" x="445" y="240">setLogEntryForUpdate(
        Close_ID,id,
        -2,false)</label><nail x="445" y="270" /></transition>
<transition id="id183"><source ref="id177" /><target ref="id176" /><label kind="synchronisation" x="241" y="255">advance_Door_Request[id]?</label><nail x="241" y="270" /></transition>
<transition id="id184"><source ref="id176" /><target ref="id177" /><label kind="synchronisation" x="286" y="10">advance_Door_Deliver[id]?</label><nail x="286" y="25" /></transition>
</template><template>
	<name>Forklift</name>
	<parameter>Forklift_t id</parameter>
<declaration>
</declaration>
<location id="id206" x="483" y="639"><name x="485" y="641">l3</name><urgent /></location>
<location id="id207" x="150" y="147"><name x="152" y="149">l1</name><urgent /></location>
<location id="id208" x="325" y="393"><name x="327" y="395">l0</name><urgent /></location>
	<init ref="id208"/>
<transition id="id209"><source ref="id206" /><target ref="id208" /><label kind="synchronisation" x="430" y="501">reset_Forklift[id]?</label><nail x="430" y="516" /></transition>
<transition id="id210"><source ref="id207" /><target ref="id208" /><label kind="synchronisation" x="37" y="10">reset_Forklift[id]?</label><nail x="37" y="25" /></transition>
<transition id="id211"><source ref="id208" /><target ref="id208" /><label kind="synchronisation" x="325" y="378">reset_Forklift[id]?</label></transition>
<transition id="id212"><source ref="id207" /><target ref="id208" /><label kind="synchronisation" x="152" y="10">advance_Forklift_Get[id]?</label><nail x="152" y="25" /></transition>
<transition id="id213"><source ref="id207" /><target ref="id208" /><label kind="synchronisation" x="334" y="10">do_log_update_Forklift[id]!</label><label kind="assignment" x="334" y="-5">setLogEntryForUpdate(
        Get_ID,id,
        -2,false)</label><nail x="334" y="25" /></transition>
<transition id="id214"><source ref="id208" /><target ref="id207" /><label kind="synchronisation" x="177" y="255">advance_Forklift_Request[id]?</label><nail x="177" y="270" /></transition>
<transition id="id215"><source ref="id208" /><target ref="id206" /><label kind="synchronisation" x="501" y="255">advance_Forklift_Close[id]?</label><nail x="501" y="270" /></transition>
</template><template>
	<name>Transport</name>
	<parameter>Transport_t id</parameter>
<declaration>
</declaration>
<location id="id237" x="518" y="885"><name x="520" y="887">l3</name><urgent /></location>
<location id="id238" x="152" y="393"><name x="154" y="395">l1</name><urgent /></location>
<location id="id239" x="326" y="639"><name x="328" y="641">l0</name><urgent /></location>
<location id="id240" x="140" y="147"><name x="142" y="149">l2</name><urgent /></location>
	<init ref="id239"/>
<transition id="id241"><source ref="id237" /><target ref="id239" /><label kind="synchronisation" x="465" y="747">reset_Transport[id]?</label><nail x="465" y="762" /></transition>
<transition id="id242"><source ref="id238" /><target ref="id239" /><label kind="synchronisation" x="240" y="255">reset_Transport[id]?</label><nail x="240" y="270" /></transition>
<transition id="id243"><source ref="id239" /><target ref="id239" /><label kind="synchronisation" x="326" y="624">reset_Transport[id]?</label></transition>
<transition id="id244"><source ref="id240" /><target ref="id239" /><label kind="synchronisation" x="37" y="10">reset_Transport[id]?</label><nail x="37" y="25" /></transition>
<transition id="id245"><source ref="id239" /><target ref="id238" /><label kind="synchronisation" x="100" y="501">advance_Transport_Request[id]?</label><nail x="100" y="516" /></transition>
<transition id="id246"><source ref="id239" /><target ref="id238" /><label kind="guard" x="205" y="516">loop_counter2 &lt; 2</label><label kind="synchronisation" x="205" y="501">do_log_update_Transport[id]!</label><label kind="assignment" x="205" y="486">setLogEntryForUpdate(
        Request_ID,id,
        -2,false), loop_counter2++</label><nail x="205" y="516" /></transition>
<transition id="id247"><source ref="id240" /><target ref="id239" /><label kind="synchronisation" x="152" y="10">advance_Transport_Deliver[id]?</label><nail x="152" y="25" /></transition>
<transition id="id248"><source ref="id240" /><target ref="id239" /><label kind="synchronisation" x="255" y="10">do_log_update_Transport[id]!</label><label kind="assignment" x="255" y="-5">setLogEntryForUpdate(
        Deliver_ID,id,
        -2,false)</label><nail x="255" y="25" /></transition>
<transition id="id249"><source ref="id238" /><target ref="id240" /><label kind="synchronisation" x="133" y="255">advance_Transport_Get[id]?</label><nail x="133" y="270" /></transition>
<transition id="id250"><source ref="id239" /><target ref="id237" /><label kind="synchronisation" x="534" y="501">advance_Transport_Close[id]?</label><nail x="534" y="516" /></transition>
</template><template>
	<name>Door_log</name>
	<parameter>Door_t id</parameter>
<declaration>
logEntryType currentLog[logSize];
int updatesSincePropagation = 0;
bool newUpdates = false;
int counter = 0;
int log_id_start = 0;
int emittedOrderCounts[logSize];
int discardedEvents[logSize];
int discardedDueToCompetionEvents[logSize];
bool olderEntryIgnored = false;
bool inCompetetion = false;
int subscriptions[amountOfUniqueEvents] = {Request_ID, Close_ID, Deliver_ID, -1};

logEntryType handleLogEntry(logEntryType tmpLogEntry,logEntryType &amp;resLog[logSize], int currentIndex) {
    // We first find the event Type
    int currentEventType = tmpLogEntry.eventID;
    if (currentEventType == Request_ID) {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    } else if (currentEventType == Deliver_ID) {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    } else if (currentEventType == Close_ID) {
        inCompetetion = handleOwnEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex, id + log_id_start, olderEntryIgnored);
    } else {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    }
    return tmpLogEntry;
}


void mergePropagationLog() {
    int currentLogCounter = 0;
    int propagatedLogCounter = 0;

    logEntryType resLog[logSize];

    logEntryType currentLogEntry;
    logEntryType propagatedLogEntry;
    logEntryType tmpLogEntry;

    bool currentLogDone = false;
    bool propagatedLogDone = false;

    int i;
    for (i = 0; i &lt; (logSize * 2); i++) {
        currentLogEntry = currentLog[currentLogCounter];
        propagatedLogEntry = propagationLog[propagatedLogCounter];
        
        // TODO if one is done then we can simply append the rest
        if (currentLogEntry.orderCount == 0) {
            currentLogDone = true;
        }
        if (propagatedLogEntry.orderCount == 0) {
            propagatedLogDone = true;
        }

        // If both are done we are done.
        if (currentLogDone &amp;&amp; propagatedLogDone) {
            currentLog = resLog; 
            return;
        }
        
        // If one entry is invalid then we have to choose the other one
        if (currentLogDone) {
            propagatedLogCounter++;
            tmpLogEntry = propagatedLogEntry;
        } else if (propagatedLogDone) {
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        } else if (propagatedLogEntry.orderCount == currentLogEntry.orderCount) { //They are the same event we use one but skip both
            propagatedLogCounter++;
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        } else if (currentLogEntry.orderCount &gt; propagatedLogEntry.orderCount) { // Both entries are valid we can now figure out which one is first
            propagatedLogCounter++;
            tmpLogEntry = propagatedLogEntry;
        } else {
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        }
        
        // If it was already ignored we don't have to add it else we have to handle it
        if (isIntInList(discardedEvents, tmpLogEntry.orderCount) || isIntInList(discardedDueToCompetionEvents, tmpLogEntry.orderCount)) {
            i--;
        } else {
            tmpLogEntry = handleLogEntry(tmpLogEntry,resLog,i-1);
            if (olderEntryIgnored) {
                int j;
                int h = 0;
                logEntryType tmpLog[logSize];
                for(j = 0; j &lt; logSize; j++) {
                    if (resLog[j].orderCount == 0) {
                        j = logSize;
                    } else if (!resLog[j].ignored) {
                        tmpLog[h] = resLog[j];
                        h++;
                    } else {
                        i--;
                        addIntToList(discardedEvents, resLog[j].orderCount);
                    }
                }
                resLog = tmpLog;
                olderEntryIgnored = false;
            }
        if (tmpLogEntry.ignored) {
                // Value should be discarded
                i--;
                if(inCompetetion) {
                    addIntToList(discardedDueToCompetionEvents, tmpLogEntry.orderCount);
                    inCompetetion = false;
                } else if (isIntInList(discardedEvents, tmpLogEntry.basedOnOrderCount)) {
                    addIntToList(discardedEvents, tmpLogEntry.orderCount);
                } else {
                    addIntToList(discardedDueToCompetionEvents, tmpLogEntry.orderCount);
                }
            } else {
                resLog[i] = tmpLogEntry;
            }

        }
    }
}

</declaration>
<location id="id185" x="-204" y="-238"><committed /></location>
<location id="id186" x="-748" y="-136"><committed /></location>
<location id="id187" x="-204" y="-136" />
<location id="id188" x="229" y="-127"><committed /></location>
<location id="id189" x="-612" y="34"><committed /></location>
<location id="id190" x="25" y="76"><committed /></location>
<location id="id191" x="-561" y="153"><committed /></location>
	<init ref="id187"/>
<transition id="id192"><source ref="id187" /><target ref="id185" /><label kind="guard" x="-136" y="-187">newUpdates</label><label kind="assignment" x="-136" y="-217">currentLogToPropagate = (log_id_start + id + 1) % amountOfLogs,
updatesSincePropagation := 0,
newUpdates := false,
setPropagationLog(currentLog)</label><nail x="-136" y="-187" /></transition>
<transition id="id193"><source ref="id185" /><target ref="id187" /><label kind="synchronisation" x="-272" y="-210">propagate_log!</label><nail x="-272" y="-195" /></transition>
<transition id="id194"><source ref="id187" /><target ref="id188" /><label kind="synchronisation" x="0" y="-66">do_log_update_Door[id]?</label><label kind="assignment" x="0" y="-81">updateLogDoor(currentLog,emittedOrderCounts,log_id_start),
updatesSincePropagation++,
newUpdates := true</label><nail x="0" y="-51" /></transition>
<transition id="id195"><source ref="id188" /><target ref="id187" /><label kind="guard" x="12" y="-132">!(updatesSincePropagation &gt; maxUpdatesSincePropagation)</label></transition>
<transition id="id196"><source ref="id188" /><target ref="id190" /><label kind="guard" x="127" y="-26">updatesSincePropagation &gt; maxUpdatesSincePropagation</label><label kind="assignment" x="127" y="-56">currentLogToPropagate = (log_id_start + id + 1) % amountOfLogs,
updatesSincePropagation := 0,
newUpdates := false</label></transition>
<transition id="id197"><source ref="id190" /><target ref="id187" /><label kind="synchronisation" x="-90" y="-45">propagate_log!</label><label kind="assignment" x="-90" y="-60">setPropagationLog(currentLog)</label></transition>
<transition id="id198"><source ref="id187" /><target ref="id186" /><label kind="guard" x="-476" y="-136">currentLogToPropagate == log_id_start + id</label><label kind="synchronisation" x="-476" y="-151">propagate_log?</label><label kind="assignment" x="-476" y="-166">mergePropagationLog()</label></transition>
<transition id="id199"><source ref="id186" /><target ref="id189" /><label kind="synchronisation" x="-680" y="-66">reset_Door[id]!</label><label kind="assignment" x="-680" y="-81">counter := 0,
setNextLogToPropagate()</label></transition>
<transition id="id200"><source ref="id189" /><target ref="id187" /><label kind="guard" x="-408" y="-51">currentLog[counter].orderCount == 0</label><label kind="synchronisation" x="-408" y="-66">propagate_log!</label></transition>
<transition id="id201"><source ref="id189" /><target ref="id191" /><label kind="guard" x="-587" y="93">currentLog[counter].orderCount != 0</label></transition>
<transition id="id202"><source ref="id191" /><target ref="id189" /><label kind="guard" x="-612" y="204">currentLog[counter].eventID == Request_ID</label><label kind="synchronisation" x="-612" y="189">advance_Door_Request[id]!</label><label kind="assignment" x="-612" y="174">counter++</label><nail x="-578" y="204" /><nail x="-646" y="204" /></transition>
<transition id="id203"><source ref="id191" /><target ref="id189" /><label kind="guard" x="-646" y="238">currentLog[counter].eventID == Close_ID</label><label kind="synchronisation" x="-646" y="223">advance_Door_Close[id]!</label><label kind="assignment" x="-646" y="208">counter++</label><nail x="-612" y="238" /><nail x="-680" y="238" /></transition>
<transition id="id204"><source ref="id191" /><target ref="id189" /><label kind="guard" x="-680" y="272">currentLog[counter].eventID == Deliver_ID</label><label kind="synchronisation" x="-680" y="257">advance_Door_Deliver[id]!</label><label kind="assignment" x="-680" y="242">counter++</label><nail x="-646" y="272" /><nail x="-714" y="272" /></transition>
<transition id="id205"><source ref="id191" /><target ref="id189" /><label kind="guard" x="-714" y="306">!isInSubsciptions(subscriptions, currentLog[counter].eventID)</label><label kind="assignment" x="-714" y="276">counter++</label><nail x="-680" y="306" /><nail x="-748" y="306" /></transition>
</template><template>
	<name>Forklift_log</name>
	<parameter>Forklift_t id</parameter>
<declaration>
logEntryType currentLog[logSize];
int updatesSincePropagation = 0;
bool newUpdates = false;
int counter = 0;
int log_id_start = 1;
int emittedOrderCounts[logSize];
int discardedEvents[logSize];
int discardedDueToCompetionEvents[logSize];
bool olderEntryIgnored = false;
bool inCompetetion = false;
int subscriptions[amountOfUniqueEvents] = {Request_ID, Close_ID, Get_ID, -1};

logEntryType handleLogEntry(logEntryType tmpLogEntry,logEntryType &amp;resLog[logSize], int currentIndex) {
    // We first find the event Type
    int currentEventType = tmpLogEntry.eventID;
    if (currentEventType == Request_ID) {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    } else if (currentEventType == Close_ID) {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    } else if (currentEventType == Get_ID) {
        inCompetetion = handleOwnEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex, id + log_id_start, olderEntryIgnored);
    } else {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    }
    return tmpLogEntry;
}


void mergePropagationLog() {
    int currentLogCounter = 0;
    int propagatedLogCounter = 0;

    logEntryType resLog[logSize];

    logEntryType currentLogEntry;
    logEntryType propagatedLogEntry;
    logEntryType tmpLogEntry;

    bool currentLogDone = false;
    bool propagatedLogDone = false;

    int i;
    for (i = 0; i &lt; (logSize * 2); i++) {
        currentLogEntry = currentLog[currentLogCounter];
        propagatedLogEntry = propagationLog[propagatedLogCounter];
        
        // TODO if one is done then we can simply append the rest
        if (currentLogEntry.orderCount == 0) {
            currentLogDone = true;
        }
        if (propagatedLogEntry.orderCount == 0) {
            propagatedLogDone = true;
        }

        // If both are done we are done.
        if (currentLogDone &amp;&amp; propagatedLogDone) {
            currentLog = resLog; 
            return;
        }
        
        // If one entry is invalid then we have to choose the other one
        if (currentLogDone) {
            propagatedLogCounter++;
            tmpLogEntry = propagatedLogEntry;
        } else if (propagatedLogDone) {
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        } else if (propagatedLogEntry.orderCount == currentLogEntry.orderCount) { //They are the same event we use one but skip both
            propagatedLogCounter++;
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        } else if (currentLogEntry.orderCount &gt; propagatedLogEntry.orderCount) { // Both entries are valid we can now figure out which one is first
            propagatedLogCounter++;
            tmpLogEntry = propagatedLogEntry;
        } else {
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        }
        
        // If it was already ignored we don't have to add it else we have to handle it
        if (isIntInList(discardedEvents, tmpLogEntry.orderCount) || isIntInList(discardedDueToCompetionEvents, tmpLogEntry.orderCount)) {
            i--;
        } else {
            tmpLogEntry = handleLogEntry(tmpLogEntry,resLog,i-1);
            if (olderEntryIgnored) {
                int j;
                int h = 0;
                logEntryType tmpLog[logSize];
                for(j = 0; j &lt; logSize; j++) {
                    if (resLog[j].orderCount == 0) {
                        j = logSize;
                    } else if (!resLog[j].ignored) {
                        tmpLog[h] = resLog[j];
                        h++;
                    } else {
                        i--;
                        addIntToList(discardedEvents, resLog[j].orderCount);
                    }
                }
                resLog = tmpLog;
                olderEntryIgnored = false;
            }
        if (tmpLogEntry.ignored) {
                // Value should be discarded
                i--;
                if(inCompetetion) {
                    addIntToList(discardedDueToCompetionEvents, tmpLogEntry.orderCount);
                    inCompetetion = false;
                } else if (isIntInList(discardedEvents, tmpLogEntry.basedOnOrderCount)) {
                    addIntToList(discardedEvents, tmpLogEntry.orderCount);
                } else {
                    addIntToList(discardedDueToCompetionEvents, tmpLogEntry.orderCount);
                }
            } else {
                resLog[i] = tmpLogEntry;
            }

        }
    }
}

</declaration>
<location id="id216" x="-204" y="-238"><committed /></location>
<location id="id217" x="-748" y="-136"><committed /></location>
<location id="id218" x="-204" y="-136" />
<location id="id219" x="229" y="-127"><committed /></location>
<location id="id220" x="-612" y="34"><committed /></location>
<location id="id221" x="25" y="76"><committed /></location>
<location id="id222" x="-561" y="153"><committed /></location>
	<init ref="id218"/>
<transition id="id223"><source ref="id218" /><target ref="id216" /><label kind="guard" x="-136" y="-187">newUpdates</label><label kind="assignment" x="-136" y="-217">currentLogToPropagate = (log_id_start + id + 1) % amountOfLogs,
updatesSincePropagation := 0,
newUpdates := false,
setPropagationLog(currentLog)</label><nail x="-136" y="-187" /></transition>
<transition id="id224"><source ref="id216" /><target ref="id218" /><label kind="synchronisation" x="-272" y="-210">propagate_log!</label><nail x="-272" y="-195" /></transition>
<transition id="id225"><source ref="id218" /><target ref="id219" /><label kind="synchronisation" x="0" y="-66">do_log_update_Forklift[id]?</label><label kind="assignment" x="0" y="-81">updateLogForklift(currentLog,emittedOrderCounts,log_id_start),
updatesSincePropagation++,
newUpdates := true</label><nail x="0" y="-51" /></transition>
<transition id="id226"><source ref="id219" /><target ref="id218" /><label kind="guard" x="12" y="-132">!(updatesSincePropagation &gt; maxUpdatesSincePropagation)</label></transition>
<transition id="id227"><source ref="id219" /><target ref="id221" /><label kind="guard" x="127" y="-26">updatesSincePropagation &gt; maxUpdatesSincePropagation</label><label kind="assignment" x="127" y="-56">currentLogToPropagate = (log_id_start + id + 1) % amountOfLogs,
updatesSincePropagation := 0,
newUpdates := false</label></transition>
<transition id="id228"><source ref="id221" /><target ref="id218" /><label kind="synchronisation" x="-90" y="-45">propagate_log!</label><label kind="assignment" x="-90" y="-60">setPropagationLog(currentLog)</label></transition>
<transition id="id229"><source ref="id218" /><target ref="id217" /><label kind="guard" x="-476" y="-136">currentLogToPropagate == log_id_start + id</label><label kind="synchronisation" x="-476" y="-151">propagate_log?</label><label kind="assignment" x="-476" y="-166">mergePropagationLog()</label></transition>
<transition id="id230"><source ref="id217" /><target ref="id220" /><label kind="synchronisation" x="-680" y="-66">reset_Forklift[id]!</label><label kind="assignment" x="-680" y="-81">counter := 0,
setNextLogToPropagate()</label></transition>
<transition id="id231"><source ref="id220" /><target ref="id218" /><label kind="guard" x="-408" y="-51">currentLog[counter].orderCount == 0</label><label kind="synchronisation" x="-408" y="-66">propagate_log!</label></transition>
<transition id="id232"><source ref="id220" /><target ref="id222" /><label kind="guard" x="-587" y="93">currentLog[counter].orderCount != 0</label></transition>
<transition id="id233"><source ref="id222" /><target ref="id220" /><label kind="guard" x="-612" y="204">currentLog[counter].eventID == Request_ID</label><label kind="synchronisation" x="-612" y="189">advance_Forklift_Request[id]!</label><label kind="assignment" x="-612" y="174">counter++</label><nail x="-578" y="204" /><nail x="-646" y="204" /></transition>
<transition id="id234"><source ref="id222" /><target ref="id220" /><label kind="guard" x="-646" y="238">currentLog[counter].eventID == Close_ID</label><label kind="synchronisation" x="-646" y="223">advance_Forklift_Close[id]!</label><label kind="assignment" x="-646" y="208">counter++</label><nail x="-612" y="238" /><nail x="-680" y="238" /></transition>
<transition id="id235"><source ref="id222" /><target ref="id220" /><label kind="guard" x="-680" y="272">currentLog[counter].eventID == Get_ID</label><label kind="synchronisation" x="-680" y="257">advance_Forklift_Get[id]!</label><label kind="assignment" x="-680" y="242">counter++</label><nail x="-646" y="272" /><nail x="-714" y="272" /></transition>
<transition id="id236"><source ref="id222" /><target ref="id220" /><label kind="guard" x="-714" y="306">!isInSubsciptions(subscriptions, currentLog[counter].eventID)</label><label kind="assignment" x="-714" y="276">counter++</label><nail x="-680" y="306" /><nail x="-748" y="306" /></transition>
</template><template>
	<name>Transport_log</name>
	<parameter>Transport_t id</parameter>
<declaration>
logEntryType currentLog[logSize];
int updatesSincePropagation = 0;
bool newUpdates = false;
int counter = 0;
int log_id_start = 3;
int emittedOrderCounts[logSize];
int discardedEvents[logSize];
int discardedDueToCompetionEvents[logSize];
bool olderEntryIgnored = false;
bool inCompetetion = false;
int subscriptions[amountOfUniqueEvents] = {Request_ID, Close_ID, Get_ID, Deliver_ID};

logEntryType handleLogEntry(logEntryType tmpLogEntry,logEntryType &amp;resLog[logSize], int currentIndex) {
    // We first find the event Type
    int currentEventType = tmpLogEntry.eventID;
    if (currentEventType == Get_ID) {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    } else if (currentEventType == Close_ID) {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    } else if (currentEventType == Request_ID) {
        inCompetetion = handleOwnEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex, id + log_id_start, olderEntryIgnored);
    } else if (currentEventType == Deliver_ID) {
        inCompetetion = handleOwnEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex, id + log_id_start, olderEntryIgnored);
    } else {
        inCompetetion = handleStandardEvent(tmpLogEntry, resLog, discardedEvents, discardedDueToCompetionEvents, currentIndex);
    }
    return tmpLogEntry;
}


void mergePropagationLog() {
    int currentLogCounter = 0;
    int propagatedLogCounter = 0;

    logEntryType resLog[logSize];

    logEntryType currentLogEntry;
    logEntryType propagatedLogEntry;
    logEntryType tmpLogEntry;

    bool currentLogDone = false;
    bool propagatedLogDone = false;

    int i;
    for (i = 0; i &lt; (logSize * 2); i++) {
        currentLogEntry = currentLog[currentLogCounter];
        propagatedLogEntry = propagationLog[propagatedLogCounter];
        
        // TODO if one is done then we can simply append the rest
        if (currentLogEntry.orderCount == 0) {
            currentLogDone = true;
        }
        if (propagatedLogEntry.orderCount == 0) {
            propagatedLogDone = true;
        }

        // If both are done we are done.
        if (currentLogDone &amp;&amp; propagatedLogDone) {
            currentLog = resLog; 
            return;
        }
        
        // If one entry is invalid then we have to choose the other one
        if (currentLogDone) {
            propagatedLogCounter++;
            tmpLogEntry = propagatedLogEntry;
        } else if (propagatedLogDone) {
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        } else if (propagatedLogEntry.orderCount == currentLogEntry.orderCount) { //They are the same event we use one but skip both
            propagatedLogCounter++;
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        } else if (currentLogEntry.orderCount &gt; propagatedLogEntry.orderCount) { // Both entries are valid we can now figure out which one is first
            propagatedLogCounter++;
            tmpLogEntry = propagatedLogEntry;
        } else {
            currentLogCounter++;
            tmpLogEntry = currentLogEntry;
        }
        
        // If it was already ignored we don't have to add it else we have to handle it
        if (isIntInList(discardedEvents, tmpLogEntry.orderCount) || isIntInList(discardedDueToCompetionEvents, tmpLogEntry.orderCount)) {
            i--;
        } else {
            tmpLogEntry = handleLogEntry(tmpLogEntry,resLog,i-1);
            if (olderEntryIgnored) {
                int j;
                int h = 0;
                logEntryType tmpLog[logSize];
                for(j = 0; j &lt; logSize; j++) {
                    if (resLog[j].orderCount == 0) {
                        j = logSize;
                    } else if (!resLog[j].ignored) {
                        tmpLog[h] = resLog[j];
                        h++;
                    } else {
                        i--;
                        addIntToList(discardedEvents, resLog[j].orderCount);
                    }
                }
                resLog = tmpLog;
                olderEntryIgnored = false;
            }
        if (tmpLogEntry.ignored) {
                // Value should be discarded
                i--;                
                if (tmpLogEntry.eventID == Request_ID &amp;&amp; tmpLogEntry.emitterID == id + log_id_start) {
                    loop_counter2 = loop_counter2 - 1;
                }
                if(inCompetetion) {
                    addIntToList(discardedDueToCompetionEvents, tmpLogEntry.orderCount);
                    inCompetetion = false;
                } else if (isIntInList(discardedEvents, tmpLogEntry.basedOnOrderCount)) {
                    addIntToList(discardedEvents, tmpLogEntry.orderCount);
                } else {
                    addIntToList(discardedDueToCompetionEvents, tmpLogEntry.orderCount);
                }
            } else {
                resLog[i] = tmpLogEntry;
            }

        }
    }
}

</declaration>
<location id="id251" x="-204" y="-238"><committed /></location>
<location id="id252" x="-748" y="-136"><committed /></location>
<location id="id253" x="-204" y="-136" />
<location id="id254" x="229" y="-127"><committed /></location>
<location id="id255" x="-612" y="34"><committed /></location>
<location id="id256" x="25" y="76"><committed /></location>
<location id="id257" x="-561" y="153"><committed /></location>
	<init ref="id253"/>
<transition id="id258"><source ref="id253" /><target ref="id251" /><label kind="guard" x="-136" y="-187">newUpdates</label><label kind="assignment" x="-136" y="-217">currentLogToPropagate = (log_id_start + id + 1) % amountOfLogs,
updatesSincePropagation := 0,
newUpdates := false,
setPropagationLog(currentLog)</label><nail x="-136" y="-187" /></transition>
<transition id="id259"><source ref="id251" /><target ref="id253" /><label kind="synchronisation" x="-272" y="-210">propagate_log!</label><nail x="-272" y="-195" /></transition>
<transition id="id260"><source ref="id253" /><target ref="id254" /><label kind="synchronisation" x="0" y="-66">do_log_update_Transport[id]?</label><label kind="assignment" x="0" y="-81">updateLogTransport(currentLog,emittedOrderCounts,log_id_start),
updatesSincePropagation++,
newUpdates := true</label><nail x="0" y="-51" /></transition>
<transition id="id261"><source ref="id254" /><target ref="id253" /><label kind="guard" x="12" y="-132">!(updatesSincePropagation &gt; maxUpdatesSincePropagation)</label></transition>
<transition id="id262"><source ref="id254" /><target ref="id256" /><label kind="guard" x="127" y="-26">updatesSincePropagation &gt; maxUpdatesSincePropagation</label><label kind="assignment" x="127" y="-56">currentLogToPropagate = (log_id_start + id + 1) % amountOfLogs,
updatesSincePropagation := 0,
newUpdates := false</label></transition>
<transition id="id263"><source ref="id256" /><target ref="id253" /><label kind="synchronisation" x="-90" y="-45">propagate_log!</label><label kind="assignment" x="-90" y="-60">setPropagationLog(currentLog)</label></transition>
<transition id="id264"><source ref="id253" /><target ref="id252" /><label kind="guard" x="-476" y="-136">currentLogToPropagate == log_id_start + id</label><label kind="synchronisation" x="-476" y="-151">propagate_log?</label><label kind="assignment" x="-476" y="-166">mergePropagationLog()</label></transition>
<transition id="id265"><source ref="id252" /><target ref="id255" /><label kind="synchronisation" x="-680" y="-66">reset_Transport[id]!</label><label kind="assignment" x="-680" y="-81">counter := 0,
setNextLogToPropagate()</label></transition>
<transition id="id266"><source ref="id255" /><target ref="id253" /><label kind="guard" x="-408" y="-51">currentLog[counter].orderCount == 0</label><label kind="synchronisation" x="-408" y="-66">propagate_log!</label></transition>
<transition id="id267"><source ref="id255" /><target ref="id257" /><label kind="guard" x="-587" y="93">currentLog[counter].orderCount != 0</label></transition>
<transition id="id268"><source ref="id257" /><target ref="id255" /><label kind="guard" x="-612" y="204">currentLog[counter].eventID == Request_ID</label><label kind="synchronisation" x="-612" y="189">advance_Transport_Request[id]!</label><label kind="assignment" x="-612" y="174">counter++</label><nail x="-578" y="204" /><nail x="-646" y="204" /></transition>
<transition id="id269"><source ref="id257" /><target ref="id255" /><label kind="guard" x="-646" y="238">currentLog[counter].eventID == Close_ID</label><label kind="synchronisation" x="-646" y="223">advance_Transport_Close[id]!</label><label kind="assignment" x="-646" y="208">counter++</label><nail x="-612" y="238" /><nail x="-680" y="238" /></transition>
<transition id="id270"><source ref="id257" /><target ref="id255" /><label kind="guard" x="-680" y="272">currentLog[counter].eventID == Get_ID</label><label kind="synchronisation" x="-680" y="257">advance_Transport_Get[id]!</label><label kind="assignment" x="-680" y="242">counter++</label><nail x="-646" y="272" /><nail x="-714" y="272" /></transition>
<transition id="id271"><source ref="id257" /><target ref="id255" /><label kind="guard" x="-714" y="306">currentLog[counter].eventID == Deliver_ID</label><label kind="synchronisation" x="-714" y="291">advance_Transport_Deliver[id]!</label><label kind="assignment" x="-714" y="276">counter++</label><nail x="-680" y="306" /><nail x="-748" y="306" /></transition>
<transition id="id272"><source ref="id257" /><target ref="id255" /><label kind="guard" x="-748" y="340">!isInSubsciptions(subscriptions, currentLog[counter].eventID)</label><label kind="assignment" x="-748" y="310">counter++</label><nail x="-714" y="340" /><nail x="-782" y="340" /></transition>
</template><system>// Place template instantiations here.
// List one or more processes to be composed into a system.
system Door, Door_log, Forklift, Forklift_log, Transport, Transport_log;
</system></nta>